// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: movies.sql

package db

import (
	"context"
	"database/sql"
)

const CreateMovie = `-- name: CreateMovie :one
INSERT INTO "movie" (title, "imdbId", "imdbRating", year, duration, "coverImage", synopsis)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreateMovieParams struct {
	Title      sql.NullString  `json:"title"`
	ImdbId     string          `json:"imdb_id"`
	ImdbRating sql.NullFloat64 `json:"imdb_rating"`
	Year       sql.NullInt32   `json:"year"`
	Duration   sql.NullInt32   `json:"duration"`
	CoverImage sql.NullString  `json:"cover_image"`
	Synopsis   sql.NullString  `json:"synopsis"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, CreateMovie,
		arg.Title,
		arg.ImdbId,
		arg.ImdbRating,
		arg.Year,
		arg.Duration,
		arg.CoverImage,
		arg.Synopsis,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const GetMovieByID = `-- name: GetMovieByID :one
SELECT 
    m.id,
    m.title,
    m."imdbId",
    m."imdbRating",
    m.year,
    m.duration,
    m."coverImage",
    m.synopsis,
    COUNT(DISTINCT c.id) as comment_count,
    COALESCE(
        JSON_AGG(
            JSON_BUILD_OBJECT(
                'language', s.language,
                'subtitleUrl', s."subtitleUrl"
            )
        ) FILTER (WHERE s.id IS NOT NULL), 
        '[]'::json
    ) as subtitles
FROM "movie" m
LEFT JOIN "comment" c ON m.id = c."movieId"
LEFT JOIN "subtitle" s ON m.id = s."movieId"
WHERE m.id = $1
GROUP BY m.id, m.title, m."imdbId", m."imdbRating", m.year, m.duration, m."coverImage", m.synopsis
`

type GetMovieByIDRow struct {
	ID           int32           `json:"id"`
	Title        sql.NullString  `json:"title"`
	ImdbId       string          `json:"imdb_id"`
	ImdbRating   sql.NullFloat64 `json:"imdb_rating"`
	Year         sql.NullInt32   `json:"year"`
	Duration     sql.NullInt32   `json:"duration"`
	CoverImage   sql.NullString  `json:"cover_image"`
	Synopsis     sql.NullString  `json:"synopsis"`
	CommentCount int64           `json:"comment_count"`
	Subtitles    interface{}     `json:"subtitles"`
}

func (q *Queries) GetMovieByID(ctx context.Context, id int32) (GetMovieByIDRow, error) {
	row := q.db.QueryRowContext(ctx, GetMovieByID, id)
	var i GetMovieByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ImdbId,
		&i.ImdbRating,
		&i.Year,
		&i.Duration,
		&i.CoverImage,
		&i.Synopsis,
		&i.CommentCount,
		&i.Subtitles,
	)
	return i, err
}

const GetMovies = `-- name: GetMovies :many
SELECT id, title FROM "movie" ORDER BY title
`

type GetMoviesRow struct {
	ID    int32          `json:"id"`
	Title sql.NullString `json:"title"`
}

func (q *Queries) GetMovies(ctx context.Context) ([]GetMoviesRow, error) {
	rows, err := q.db.QueryContext(ctx, GetMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMoviesRow{}
	for rows.Next() {
		var i GetMoviesRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
