// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: comments.sql

package db

import (
	"context"
	"database/sql"
)

const CreateComment = `-- name: CreateComment :one
INSERT INTO "comment" (content, username, "userId", "userAvatar", "movieId")
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateCommentParams struct {
	Content    string         `json:"content"`
	Username   string         `json:"username"`
	UserId     int32          `json:"user_id"`
	UserAvatar sql.NullString `json:"user_avatar"`
	MovieId    int32          `json:"movie_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, CreateComment,
		arg.Content,
		arg.Username,
		arg.UserId,
		arg.UserAvatar,
		arg.MovieId,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const DeleteComment = `-- name: DeleteComment :exec
DELETE FROM "comment" WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, DeleteComment, id)
	return err
}

const GetCommentByID = `-- name: GetCommentByID :one
SELECT 
    c.id,
    c.content,
    c.username,
    c."userAvatar",
    c."createdAt",
    m.title as movie_title
FROM "comment" c
JOIN "movie" m ON c."movieId" = m.id
WHERE c.id = $1
`

type GetCommentByIDRow struct {
	ID         int32          `json:"id"`
	Content    string         `json:"content"`
	Username   string         `json:"username"`
	UserAvatar sql.NullString `json:"user_avatar"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	MovieTitle sql.NullString `json:"movie_title"`
}

func (q *Queries) GetCommentByID(ctx context.Context, id int32) (GetCommentByIDRow, error) {
	row := q.db.QueryRowContext(ctx, GetCommentByID, id)
	var i GetCommentByIDRow
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Username,
		&i.UserAvatar,
		&i.CreatedAt,
		&i.MovieTitle,
	)
	return i, err
}

const GetComments = `-- name: GetComments :many
SELECT 
    c.id,
    c.content,
    c.username,
    c."userAvatar",
    c."createdAt",
    m.title as movie_title
FROM "comment" c
JOIN "movie" m ON c."movieId" = m.id
ORDER BY c."createdAt" DESC
`

type GetCommentsRow struct {
	ID         int32          `json:"id"`
	Content    string         `json:"content"`
	Username   string         `json:"username"`
	UserAvatar sql.NullString `json:"user_avatar"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	MovieTitle sql.NullString `json:"movie_title"`
}

func (q *Queries) GetComments(ctx context.Context) ([]GetCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCommentsRow{}
	for rows.Next() {
		var i GetCommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Username,
			&i.UserAvatar,
			&i.CreatedAt,
			&i.MovieTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCommentsByMovieID = `-- name: GetCommentsByMovieID :many
SELECT 
    c.id,
    c.content,
    c.username,
    c."userAvatar",
    c."createdAt"
FROM "comment" c
WHERE c."movieId" = $1
ORDER BY c."createdAt" DESC
`

type GetCommentsByMovieIDRow struct {
	ID         int32          `json:"id"`
	Content    string         `json:"content"`
	Username   string         `json:"username"`
	UserAvatar sql.NullString `json:"user_avatar"`
	CreatedAt  sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetCommentsByMovieID(ctx context.Context, movieid int32) ([]GetCommentsByMovieIDRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCommentsByMovieID, movieid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCommentsByMovieIDRow{}
	for rows.Next() {
		var i GetCommentsByMovieIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Username,
			&i.UserAvatar,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateComment = `-- name: UpdateComment :exec
UPDATE "comment" 
SET content = $2, username = $3
WHERE id = $1
`

type UpdateCommentParams struct {
	ID       int32  `json:"id"`
	Content  string `json:"content"`
	Username string `json:"username"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) error {
	_, err := q.db.ExecContext(ctx, UpdateComment, arg.ID, arg.Content, arg.Username)
	return err
}
