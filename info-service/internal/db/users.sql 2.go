// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO "user" ("userName", email, password, "profilePicture", "firstName", "lastName")
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateUserParams struct {
	UserName       string         `json:"user_name"`
	Email          string         `json:"email"`
	Password       string         `json:"password"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, CreateUser,
		arg.UserName,
		arg.Email,
		arg.Password,
		arg.ProfilePicture,
		arg.FirstName,
		arg.LastName,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const GetUserByID = `-- name: GetUserByID :one
SELECT id, "profilePicture", email, "userName", "lastName", "firstName", password, verified, "preferredLanguage", "lastActive", "authType", "createdAt" FROM "user" WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProfilePicture,
		&i.Email,
		&i.UserName,
		&i.LastName,
		&i.FirstName,
		&i.Password,
		&i.Verified,
		&i.PreferredLanguage,
		&i.LastActive,
		&i.AuthType,
		&i.CreatedAt,
	)
	return i, err
}

const GetUsers = `-- name: GetUsers :many
SELECT id, "profilePicture", email, "userName", "lastName", "firstName", password, verified, "preferredLanguage", "lastActive", "authType", "createdAt" FROM "user"
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, GetUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.ProfilePicture,
			&i.Email,
			&i.UserName,
			&i.LastName,
			&i.FirstName,
			&i.Password,
			&i.Verified,
			&i.PreferredLanguage,
			&i.LastActive,
			&i.AuthType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :exec
UPDATE "user" 
SET "userName" = $2, email = $3, password = $4, "profilePicture" = $5
WHERE id = $1
`

type UpdateUserParams struct {
	ID             int32          `json:"id"`
	UserName       string         `json:"user_name"`
	Email          string         `json:"email"`
	Password       string         `json:"password"`
	ProfilePicture sql.NullString `json:"profile_picture"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, UpdateUser,
		arg.ID,
		arg.UserName,
		arg.Email,
		arg.Password,
		arg.ProfilePicture,
	)
	return err
}
